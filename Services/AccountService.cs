using AutoMapper;
using HouseKeeperApi.Entities;
using HouseKeeperApi.Models;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace HouseKeeperApi.Services
{
    public class AccountService : IAccountService
    {
        private readonly HouseKeeperDbContext _houseKeeperDbContext;
        private readonly IPasswordHasher<User> _passwordHasher;
        private readonly IHttpContextAccessor _httpContextAccessor;
        private readonly AuthenticationSettings _authenticationSettings;
        private readonly IMapper _mapper;
        private readonly IEmailService _emailSender;
        public AccountService(IEmailService emailSender, IMapper mapper, HouseKeeperDbContext houseKeeperDbContext, IPasswordHasher<User> passwordHasher, AuthenticationSettings authenticationSettings, IHttpContextAccessor httpContextAccessor)
        {
            _houseKeeperDbContext = houseKeeperDbContext;
            _passwordHasher = passwordHasher;
            _authenticationSettings = authenticationSettings;
            _httpContextAccessor = httpContextAccessor;
            _mapper = mapper;
            _emailSender = emailSender;
        }

        public async Task<UserByIdDto> GetUserByIdDto(int userId)
        {
            try
            {
                var user = await _houseKeeperDbContext.Users
                    .Include(u => u.Role)
                    .FirstOrDefaultAsync(u => u.Id == userId)
                    ?? throw new Exception($"Brak usera o Id = {userId}.");

                return _mapper.Map<UserByIdDto>(user);
            }
            catch (DbUpdateException ex) { throw new InvalidOperationException("Wystapil problem podczas pobierania usera .", ex); }
            catch (Exception ex) { throw new Exception("Wystapil nieoczekiwany blad podczas pobierania usera.", ex); }
        }

        public async Task RegisterTenant(RegisterTenantDto registerUserDto)
        {
            try
            {

                var autoGeneratedPassword = GenerateStrongPassword();

                var password = autoGeneratedPassword;

                await _emailSender.SendEmailAsync(
                    registerUserDto.Email,
                    "Your account already created with secure password",
                    $"<p>Safety password to login to your acxount: <u>{password}</u> </p>");

                var newUser = new User()
                {
                    Name = registerUserDto.Name,
                    Surname = registerUserDto.Surname,
                    Email = registerUserDto.Email,
                    Phone = registerUserDto.Phone,
                    DateOfBirth = registerUserDto.DateOfBirth,
                    RoleId = registerUserDto.RoleId,
                };

                var passwordHash = _passwordHasher.HashPassword(newUser, password);
                newUser.PasswordHash = passwordHash;
                await _houseKeeperDbContext.Users.AddAsync(newUser);
                await _houseKeeperDbContext.SaveChangesAsync();


                var house = await _houseKeeperDbContext.Houses.FirstOrDefaultAsync(h => h.Id == registerUserDto.HouseId);
                var room = await _houseKeeperDbContext.Rooms.FirstOrDefaultAsync(r => r.Id == registerUserDto.RoomId);

                if (house != null && room != null)
                {
                    // Dodaj najemcę do kolekcji
                    house.Tenants.Add(newUser);

                    // Zapisz zmiany w bazie danych
                    await _houseKeeperDbContext.SaveChangesAsync();
                    Console.WriteLine("Tenant został dodany do domu.");

                    room.TenantId = newUser.Id;
                    room.Tenant = newUser;
                    await _houseKeeperDbContext.SaveChangesAsync();
                    Console.WriteLine("Tenant został dodany do pokoju.");

                }

            }
            catch (DbUpdateException ex) { throw new InvalidOperationException("Wystapil problem podczas tworzenia nowego usera .", ex); }
            catch (Exception ex) { throw new Exception("Wystapil nieoczekiwany blad podczas tworzenia nowego usera.", ex); }
        }

        public async Task RegisterUser(RegisterUserDto registerUserDto)
        {
            try
            {
                //registerUserDto.RegisterTenant = createTenant;
                var newUser = new User()
                {
                    Name = registerUserDto.Name,
                    Surname = registerUserDto.Surname,
                    Email = registerUserDto.Email,
                    Phone = registerUserDto.Phone,
                    DateOfBirth = registerUserDto.DateOfBirth,
                    RoleId = registerUserDto.RoleId,
                };


                var passwordHash = _passwordHasher.HashPassword(newUser, registerUserDto.Password);
                newUser.PasswordHash = passwordHash;
                await _houseKeeperDbContext.Users.AddAsync(newUser);
                await _houseKeeperDbContext.SaveChangesAsync();
            }
            catch (DbUpdateException ex) { throw new InvalidOperationException("Wystapil problem podczas tworzenia nowego usera .", ex); }
            catch (Exception ex) { throw new Exception("Wystapil nieoczekiwany blad podczas tworzenia nowego usera.", ex); }
        }

        public string GenerateJwt(LoginUserDto loginUserDto)
        {
            var user = _houseKeeperDbContext.Users
                .Include(u => u.Role)
                .FirstOrDefault(u => u.Email == loginUserDto.Email) ?? throw new Exception("Invalid Username or password");
            var result = _passwordHasher.VerifyHashedPassword(user, user.PasswordHash, loginUserDto.Password); //czy poprawne hasło czy nie

            if (result == PasswordVerificationResult.Failed)
                throw new Exception("Invalid Username or password");

            var claims = new List<Claim>()
            {
                new(ClaimTypes.NameIdentifier, user.Id.ToString()),
                new(ClaimTypes.Name, $"{user.Name}"),
                new(ClaimTypes.Surname, $"{user.Surname }"),
                new(ClaimTypes.Role, $"{user.Role.RoleName}"), //dzięki temu odczytujemy role użytkownika
                new(ClaimTypes.Email, $"{user.Email}"),
                new(ClaimTypes.MobilePhone,  $"{user.Phone}"),
            };

            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_authenticationSettings.JwtKey)); //klucz prywatny

            var cred = new SigningCredentials(key, SecurityAlgorithms.HmacSha256); //kluc pplus algorytm hashowania

            var expires = DateTime.Now.AddDays(_authenticationSettings.JwtExpireDays);

            var token = new JwtSecurityToken(_authenticationSettings.JwtIssuer,
                _authenticationSettings.JwtIssuer,
                claims,
                expires: expires,
                signingCredentials: cred);
            var tokenHandler = new JwtSecurityTokenHandler();
            return tokenHandler.WriteToken(token);
        }

        //public int GetUserId()
        //{
        //    // Pobieranie UserId z tokena JWT (dla JWT zazwyczaj jest przechowywane jako "sub")
        //    var userId = _httpContextAccessor.HttpContext?.User
        //        .FindFirst(ClaimTypes.NameIdentifier)?.Value;
        //    return userId != null ? int.Parse(userId) : throw new UnauthorizedAccessException("UserId not found");
        //}

        // Zmiana hasła
        public async Task<bool> ChangePassword(ChangePasswordDto changePasswordDto)
        {
            try
            {
                var user = await _houseKeeperDbContext.Users
                                .FirstOrDefaultAsync(u => u.Id == changePasswordDto.UserId)
                                ?? throw new UnauthorizedAccessException("User doesn't exist");

                var passwordVerification = _passwordHasher.VerifyHashedPassword(user, user.PasswordHash, changePasswordDto.CurrentPassword);

                if (passwordVerification != PasswordVerificationResult.Success)
                    throw new Exception("Current password is wrong!");

                if (changePasswordDto.NewPassword != changePasswordDto.ConfirmNewPassword)
                    throw new Exception("New password and confirmation are different!");

                user.PasswordHash = _passwordHasher.HashPassword(user, changePasswordDto.NewPassword);

                _houseKeeperDbContext.Users.Update(user);
                await _houseKeeperDbContext.SaveChangesAsync();

                return true;
            }
            catch (DbUpdateException ex) { throw new InvalidOperationException("Wystapil problem podczas zmiany hasla .", ex); }
            catch (Exception ex) { throw new Exception("Wystapil nieoczekiwany blad podczas zmiany hasla.", ex); }
        }
        // Zmiana danych wymaga hasła
        public async Task<bool> UpdateUserData(UpdateUserDto updateUserDataDto)
        {
            try
            {
                var user = await _houseKeeperDbContext.Users
                    .FindAsync(updateUserDataDto.Id)
                    ?? throw new UnauthorizedAccessException("User doesn't exist");

                var passwordVerification = _passwordHasher.VerifyHashedPassword(user, user.PasswordHash, updateUserDataDto.CurrentPassword);

                if (passwordVerification != PasswordVerificationResult.Success)
                    throw new Exception("Wrong password!");

                user.Name = updateUserDataDto.Name ?? user.Name;
                user.Surname = updateUserDataDto.Surname ?? user.Surname;
                user.Email = updateUserDataDto.Email ?? user.Email;
                user.Phone = updateUserDataDto.Phone ?? user.Phone;
                user.DateOfBirth = updateUserDataDto.DateOfBirth ?? user.DateOfBirth;

                _houseKeeperDbContext.Users.Update(user);
                await _houseKeeperDbContext.SaveChangesAsync();

                return true;
            }
            catch (DbUpdateException ex) { throw new InvalidOperationException("Wystapil problem podczas zmiany danych usera .", ex); }
            catch (Exception ex) { throw new Exception("Wystapil nieoczekiwany blad podczas zmiany danych usera.", ex); }
        }

        private string GenerateStrongPassword()
        {
            var random = new Random();
            const string validChars = "!@#$%^&*()abcdefghijklmnopqrstuvwxyz!@#$%^&*()ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()";

            var password = new char[16];  // Długość hasła
            for (int i = 0; i < password.Length; i++)
            {
                password[i] = validChars[random.Next(validChars.Length)];
            }
            return new string(password);
        }

        // tworzenie konta tenantowi z hasłem tymczasowym przez wysłanie maila


    }
}
